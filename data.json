{
  "reasoning_gym\\algebra\\complex_arithmetic.py": {
    "config": {
      "min_real": {
        "type": "int",         "value": "-10"
      },       "max_real": {
        "type": "int",         "value": "10"
      },       "min_imag": {
        "type": "int",         "value": "-10"
      },       "max_imag": {
        "type": "int",         "value": "10"
      },       "operations": {
        "type": "tuple[str, ...]",         "value": "('+', '-', '*', '/')"
      },       "operations_weights": {
        "type": "list[float]",         "value": "field(default_factory=lambda: [0.4, 0.4, 0.1, 0.1])"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "min_real": [        -10,         -100,         -10000,         -100000000
      ],       "max_real": [        10,         100,         10000,         100000000
      ],       "min_imag": [        -10,         -100,         -10000,         -100000000
      ],       "max_imag": [        10,         100,         10000,         100000000
      ],       "operations_weights": [        [          0.4,           0.4,           0.1,           0.1
        ],         [          0.25,           0.25,           0.25,           0.25
        ],         [          0.2,           0.2,           0.3,           0.3
        ],         [          0.1,           0.1,           0.4,           0.4
        ]
      ]
    }
  },   "reasoning_gym\\algebra\\intermediate_integration.py": {
    "config": {
      "problem_types": {
        "type": "tuple",         "value": "('linear', 'radical', 'log_inverse_trig', 'trigonometric', 'polynomial_exp_trig', 'exponential', 'cyclic', 'repeated_parts')"
      },       "problem_type_weights": {
        "type": "list[float]",         "value": "field(default_factory=lambda: [0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125])"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      },       "linear_lower_bound": {
        "type": "int",         "value": "1"
      },       "linear_upper_bound": {
        "type": "int",         "value": "10"
      },       "min_linear_degree": {
        "type": "int",         "value": "2"
      },       "max_linear_degree": {
        "type": "int",         "value": "4"
      },       "outer_constant_min": {
        "type": "int",         "value": "1"
      },       "outer_constant_max": {
        "type": "int",         "value": "3"
      },       "min_poly_degree": {
        "type": "int",         "value": "1"
      },       "max_poly_degree": {
        "type": "int",         "value": "3"
      },       "symbols": {
        "type": "tuple",         "value": "'x'"
      },       "operators": {
        "type": "tuple",         "value": "('+', '-')"
      }
    },     "levels": {
      "problem_type_weights": [        [          1,           0,           0,           0,           0,           0,           0,           0
        ],         [          0,           1,           0,           0,           0,           0,           0,           0
        ],         [          0,           0,           1,           0,           0,           0,           0,           0
        ],         [          0,           0,           0,           1,           0,           0,           0,           0
        ],         [          0,           0,           0,           0,           1,           0,           0,           0
        ],         [          0,           0,           0,           0,           0,           1,           0,           0
        ],         [          0,           0,           0,           0,           0,           0,           1,           0
        ],         [          0,           0,           0,           0,           0,           0,           0,           1
        ]
      ]
    }
  },   "reasoning_gym\\algebra\\polynomial_equations.py": {
    "config": {
      "min_terms": {
        "type": "int",         "value": "2"
      },       "max_terms": {
        "type": "int",         "value": "4"
      },       "min_value": {
        "type": "int",         "value": "1"
      },       "max_value": {
        "type": "int",         "value": "100"
      },       "min_degree": {
        "type": "int",         "value": "1"
      },       "max_degree": {
        "type": "int",         "value": "3"
      },       "operators": {
        "type": "tuple[str, ...]",         "value": "('+', '-')"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      },       "penalty_missing_factor": {
        "type": null,         "value": "0.5"
      },       "penalty_extra_factor": {
        "type": null,         "value": "0.5"
      },       "exp_distance_factor": {
        "type": null,         "value": "-10.0"
      }
    },     "levels": {
      "degree": [        1,         2,         3,         4
      ],       "terms": [        2,         3,         4,         5
      ]
    }
  },   "reasoning_gym\\algebra\\polynomial_multiplication.py": {
    "config": {
      "min_terms": {
        "type": "int",         "value": "2"
      },       "max_terms": {
        "type": "int",         "value": "4"
      },       "min_value": {
        "type": "int",         "value": "1"
      },       "max_value": {
        "type": "int",         "value": "100"
      },       "min_degree": {
        "type": "int",         "value": "0"
      },       "max_degree": {
        "type": "int",         "value": "3"
      },       "min_polynomials": {
        "type": "int",         "value": "2"
      },       "max_polynomials": {
        "type": "int",         "value": "3"
      },       "variables": {
        "type": "tuple[str]",         "value": "('x', 'y', 'z')"
      },       "allow_cross_variable_product": {
        "type": "bool",         "value": "False"
      },       "allow_multivariate_polynomials": {
        "type": "bool",         "value": "False"
      },       "operators": {
        "type": "tuple[str, ...]",         "value": "('+', '-')"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "min_terms": [        2,         4,         6,         8
      ],       "max_terms": [        4,         8,         12,         16
      ],       "min_value": [        1,         10,         100,         1000
      ],       "max_value": [        100,         10000,         1000000,         100000000
      ],       "min_degree": [        0,         1,         2,         3
      ],       "max_degree": [        2,         4,         8,         10
      ],       "min_polynomials": [        2,         3,         4,         5
      ],       "max_polynomials": [        4,         6,         8,         10
      ]
    }
  },   "reasoning_gym\\algebra\\simple_equations.py": {
    "config": {
      "min_terms": {
        "type": "int",         "value": "2"
      },       "max_terms": {
        "type": "int",         "value": "4"
      },       "min_value": {
        "type": "int",         "value": "1"
      },       "max_value": {
        "type": "int",         "value": "100"
      },       "operators": {
        "type": "tuple",         "value": "('+', '-', '*')"
      },       "operators_weights": {
        "type": "list[float]",         "value": "field(default_factory=lambda: [0.4, 0.4, 0.2])"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "min_terms": [        2,         3,         4,         5
      ],       "max_terms": [        5,         10,         15,         20
      ],       "min_value": [        1,         10,         100,         1000
      ],       "max_value": [        100,         10000,         1000000,         100000000
      ],       "operators_weights": [        [          0.4,           0.4,           0.2
        ],         [          0.35,           0.35,           0.3
        ],         [          0.3,           0.3,           0.4
        ],         [          0.2,           0.2,           0.6
        ]
      ]
    }
  },   "reasoning_gym\\algebra\\simple_integration.py": {
    "config": {
      "min_terms": {
        "type": "int",         "value": "2"
      },       "max_terms": {
        "type": "int",         "value": "5"
      },       "min_degree": {
        "type": "int",         "value": "1"
      },       "max_degree": {
        "type": "int",         "value": "10"
      },       "min_bounds": {
        "type": "int",         "value": "1"
      },       "max_bounds": {
        "type": "int",         "value": "10"
      },       "operators": {
        "type": "tuple",         "value": "('+', '-')"
      },       "symbols": {
        "type": "tuple",         "value": "('x', 'X')"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "terms": [        2,         3,         4,         5
      ]
    }
  },   "reasoning_gym\\algorithmic\\ab.py": {
    "config": {
      "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      },       "length": {
        "type": "int",         "value": "10"
      }
    },     "levels": {
      "length": [        10,         25,         50,         100
      ]
    }
  },   "reasoning_gym\\algorithmic\\base_conversion.py": {
    "config": {
      "min_base": {
        "type": "int",         "value": "2"
      },       "max_base": {
        "type": "int",         "value": "16"
      },       "min_value": {
        "type": "int",         "value": "0"
      },       "max_value": {
        "type": "int",         "value": "1000"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "base": [        2,         9,         18,         27,         36
      ],       "value": [        1000,         10000,         100000,         1000000
      ]
    }
  },   "reasoning_gym\\algorithmic\\binary_alternation.py": {
    "config": {
      "min_n": {
        "type": "int",         "value": "10"
      },       "max_n": {
        "type": "int",         "value": "30"
      },       "p_solvable": {
        "type": "float",         "value": "0.8"
      },       "size": {
        "type": "int",         "value": "500"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      }
    },     "levels": {
      "n": [        10,         50,         500,         1000
      ]
    }
  },   "reasoning_gym\\algorithmic\\binary_matrix.py": {
    "config": {
      "min_n": {
        "type": "int",         "value": "3"
      },       "max_n": {
        "type": "int",         "value": "10"
      },       "p_zero": {
        "type": "float",         "value": "0.25"
      },       "size": {
        "type": "int",         "value": "500"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      }
    },     "levels": {
      "p_zero": [        0.5,         0.25,         0.1,         0.05
      ],       "n": [        10,         25,         50,         100
      ]
    }
  },   "reasoning_gym\\algorithmic\\caesar_cipher.py": {
    "config": {
      "delimiter": {
        "type": "str",         "value": "'.'"
      },       "min_words": {
        "type": "int",         "value": "3"
      },       "max_words": {
        "type": "int",         "value": "20"
      },       "min_rotation": {
        "type": "int",         "value": "1"
      },       "max_rotation": {
        "type": "int",         "value": "25"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "rotation": [        5,         15,         25,         50
      ],       "words": [        5,         15,         25,         50
      ]
    }
  },   "reasoning_gym\\algorithmic\\count_primes.py": {
    "config": {
      "min_n": {
        "type": "int",         "value": "1"
      },       "max_n": {
        "type": "int",         "value": "10000"
      },       "size": {
        "type": "int",         "value": "500"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      }
    },     "levels": {
      "n": [        10,         1000,         10000,         50000,         100000
      ]
    }
  },   "reasoning_gym\\algorithmic\\cryptarithm.py": {
    "config": {
      "min_words": {
        "type": "int",         "value": "2"
      },       "max_words": {
        "type": "int",         "value": "3"
      },       "allow_leading_zero": {
        "type": "bool",         "value": "False"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "words": [        2,         5,         10,         50
      ]
    }
  },   "reasoning_gym\\algorithmic\\game_of_life.py": {
    "config": {
      "grid_size_x": {
        "type": "int",         "value": "10"
      },       "grid_size_y": {
        "type": "int",         "value": "10"
      },       "filled_cells_weights": {
        "type": "float",         "value": "0.1"
      },       "filled_cells": {
        "type": "int",         "value": "int(filled_cells_weights * grid_size_x * grid_size_y)"
      },       "simulation_steps": {
        "type": "int",         "value": "1"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "grid_size_x": [        10,         25,         50,         100
      ],       "grid_size_y": [        10,         25,         50,         100
      ],       "filled_cells_weights": [        0.1,         0.2,         0.5,         0.8
      ],       "simulation_steps": [        1,         2,         5,         10
      ]
    }
  },   "reasoning_gym\\algorithmic\\game_of_life_halting.py": {
    "config": {
      "grid_size_x": {
        "type": "int",         "value": "12"
      },       "grid_size_y": {
        "type": "int",         "value": "12"
      },       "difficulty": {
        "type": "int",         "value": "1"
      },       "num_oscillators": {
        "type": "int",         "value": "5"
      },       "max_simulation_steps": {
        "type": "int",         "value": "20"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "grid_size_x": [        10,         25,         50,         100
      ],       "grid_size_y": [        10,         25,         50,         100
      ],       "difficulty": [        1,         2,         3
      ],       "num_oscillators": [        3,         7,         10,         20
      ],       "max_simulation_steps": [        20,         50,         100,         200
      ]
    }
  },   "reasoning_gym\\algorithmic\\graph_color.py": {
    "config": {
      "num_colors": {
        "type": "int",         "value": "3"
      },       "min_num_vertices": {
        "type": "int",         "value": "10"
      },       "max_num_vertices": {
        "type": "int",         "value": "10"
      },       "edge_probability": {
        "type": "float",         "value": "0.1"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "num_vertices": [        6,         10,         20,         25
      ],       "num_colors": [        5,         4,         3
      ]
    }
  },   "reasoning_gym\\algorithmic\\group_anagrams.py": {
    "config": {
      "min_anagram_groups": {
        "type": "int",         "value": "2"
      },       "max_anagram_groups": {
        "type": "int",         "value": "10"
      },       "min_words_per_group": {
        "type": "int",         "value": "2"
      },       "max_words_per_group": {
        "type": "int",         "value": "5"
      },       "size": {
        "type": "int",         "value": "500"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      }
    },     "levels": {
      "anagram_groups": [        5,         10,         50,         100
      ],       "words_per_group": [        2,         5,         10
      ]
    }
  },   "reasoning_gym\\algorithmic\\isomorphic_strings.py": {
    "config": {
      "min_string_length": {
        "type": "int",         "value": "2"
      },       "max_string_length": {
        "type": "int",         "value": "10"
      },       "p_solvable": {
        "type": "float",         "value": "0.5"
      },       "size": {
        "type": "int",         "value": "500"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      }
    },     "levels": {
      "string_length": [        10,         50,         100,         1000
      ]
    }
  },   "reasoning_gym\\algorithmic\\jugs.py": {
    "config": {
      "num_jugs": {
        "type": "int",         "value": "3"
      },       "difficulty": {
        "type": "int",         "value": "10"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "num_jugs": [        3,         4,         5,         7
      ],       "difficulty": [        5,         10,         50,         100,         199
      ]
    }
  },   "reasoning_gym\\algorithmic\\letter_counting.py": {
    "config": {
      "min_words": {
        "type": "int",         "value": "5"
      },       "max_words": {
        "type": "int",         "value": "15"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "words": [        5,         7,         9,         11,         13,         15,         17,         19
      ]
    }
  },   "reasoning_gym\\algorithmic\\letter_jumble.py": {
    "config": {
      "min_word_len": {
        "type": "int",         "value": "1"
      },       "max_word_len": {
        "type": "int",         "value": "64"
      },       "min_words": {
        "type": "int",         "value": "3"
      },       "max_words": {
        "type": "int",         "value": "20"
      },       "min_corruption_level": {
        "type": "float",         "value": "0.1"
      },       "max_corruption_level": {
        "type": "float",         "value": "0.9"
      },       "consecutive_words": {
        "type": "bool",         "value": "True"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "word_len": [        5,         10,         15,         30,         50
      ],       "words": [        5,         10,         25,         50,         100
      ],       "corruption_level": [        0.1,         0.3,         0.6,         0.9
      ]
    }
  },   "reasoning_gym\\algorithmic\\manipulate_matrix.py": {
    "config": {
      "min_rows": {
        "type": "int",         "value": "2"
      },       "min_cols": {
        "type": "int",         "value": "2"
      },       "max_rows": {
        "type": "int",         "value": "10"
      },       "max_cols": {
        "type": "int",         "value": "10"
      },       "min_transforms": {
        "type": "int",         "value": "1"
      },       "max_transforms": {
        "type": "int",         "value": "10"
      },       "w_rotate": {
        "type": "float",         "value": "1"
      },       "w_hmirror": {
        "type": "float",         "value": "1"
      },       "w_vmirror": {
        "type": "float",         "value": "1"
      },       "w_dmirror": {
        "type": "float",         "value": "1"
      },       "w_cmirror": {
        "type": "float",         "value": "1"
      },       "w_map": {
        "type": "float",         "value": "1"
      },       "w_crop": {
        "type": "float",         "value": "1"
      },       "w_remove_every_nth_row": {
        "type": "float",         "value": "1"
      },       "w_remove_every_nth_col": {
        "type": "float",         "value": "1"
      },       "w_zero_divisible": {
        "type": "float",         "value": "1"
      },       "size": {
        "type": "int",         "value": "500"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      }
    },     "levels": {
      "rows": [        10,         25,         50,         100
      ],       "cols": [        10,         25,         50,         100
      ],       "num_transforms": [        1,         3,         5,         10,         15
      ]
    }
  },   "reasoning_gym\\algorithmic\\number_filtering.py": {
    "config": {
      "min_numbers": {
        "type": "int",         "value": "3"
      },       "max_numbers": {
        "type": "int",         "value": "10"
      },       "min_decimals": {
        "type": "int",         "value": "0"
      },       "max_decimals": {
        "type": "int",         "value": "4"
      },       "min_value": {
        "type": "float",         "value": "-100.0"
      },       "max_value": {
        "type": "float",         "value": "100.0"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "numbers": [        10,         50,         100,         200
      ],       "decimals": [        0,         2,         4,         6
      ],       "min_value": [        -100,         -500,         -1000,         -10000
      ],       "max_value": [        100,         500,         1000,         10000
      ]
    }
  },   "reasoning_gym\\algorithmic\\number_sorting.py": {
    "config": {
      "min_numbers": {
        "type": "int",         "value": "3"
      },       "max_numbers": {
        "type": "int",         "value": "10"
      },       "min_decimals": {
        "type": "int",         "value": "0"
      },       "max_decimals": {
        "type": "int",         "value": "2"
      },       "min_value": {
        "type": "float",         "value": "-100.0"
      },       "max_value": {
        "type": "float",         "value": "100.0"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "numbers": [        10,         50,         100,         200
      ],       "decimals": [        0,         1,         2,         3,         4,         5,         6,         7
      ],       "min_value": [        -100,         -500,         -1000,         -10000
      ],       "max_value": [        100,         500,         1000,         10000
      ]
    }
  },   "reasoning_gym\\algorithmic\\palindrome_generation.py": {
    "config": {
      "min_length": {
        "type": "int",         "value": "3"
      },       "max_length": {
        "type": "int",         "value": "10"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "50"
      }
    },     "levels": {
      "length": [        10,         50,         100,         500
      ]
    }
  },   "reasoning_gym\\algorithmic\\palindrome_partitioning.py": {
    "config": {
      "min_string_len": {
        "type": "int",         "value": "5"
      },       "max_string_len": {
        "type": "int",         "value": "15"
      },       "min_substring_palindrome_len": {
        "type": "int",         "value": "1"
      },       "max_substring_palindrome_len": {
        "type": "int",         "value": "5"
      },       "size": {
        "type": "int",         "value": "500"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      }
    },     "levels": {
      "string_len": [        5,         10,         50,         100
      ],       "substring_palindrome_len": [        3,         5,         10,         20
      ]
    }
  },   "reasoning_gym\\algorithmic\\pool_matrix.py": {
    "config": {
      "min_rows": {
        "type": "int",         "value": "2"
      },       "max_rows": {
        "type": "int",         "value": "10"
      },       "min_cols": {
        "type": "int",         "value": "2"
      },       "max_cols": {
        "type": "int",         "value": "10"
      },       "min_pool_size": {
        "type": "int",         "value": "1"
      },       "max_pool_size": {
        "type": "int",         "value": "3"
      },       "size": {
        "type": "int",         "value": "500"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      }
    },     "levels": {
      "rows": [        10,         25,         50,         100
      ],       "cols": [        10,         25,         50,         100
      ],       "pool_size": [        3,         5,         7,         9
      ]
    }
  },   "reasoning_gym\\algorithmic\\ransom_note.py": {
    "config": {
      "min_note_length": {
        "type": "int",         "value": "1"
      },       "max_note_length": {
        "type": "int",         "value": "10"
      },       "min_magazine_length": {
        "type": "int",         "value": "2"
      },       "max_magazine_length": {
        "type": "int",         "value": "30"
      },       "p_solvable": {
        "type": "float",         "value": "0.5"
      },       "size": {
        "type": "int",         "value": "500"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      }
    },     "levels": {
      "note_length": [        10,         50,         100,         500
      ],       "magazine_length": [        50,         100,         500,         1000
      ]
    }
  },   "reasoning_gym\\algorithmic\\rotate_matrix.py": {
    "config": {
      "min_n": {
        "type": "int",         "value": "2"
      },       "max_n": {
        "type": "int",         "value": "10"
      },       "min_rotations": {
        "type": "int",         "value": "0"
      },       "max_rotations": {
        "type": "int",         "value": "10"
      },       "size": {
        "type": "int",         "value": "500"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      }
    },     "levels": {
      "n": [        10,         25,         50,         100
      ],       "num_rotations": [        1,         5,         10,         15,         20
      ]
    }
  },   "reasoning_gym\\algorithmic\\rotten_oranges.py": {
    "config": {
      "min_n": {
        "type": "int",         "value": "10"
      },       "max_n": {
        "type": "int",         "value": "30"
      },       "p_oranges": {
        "type": "float",         "value": "0.85"
      },       "p_rotten": {
        "type": "float",         "value": "0.1"
      },       "size": {
        "type": "int",         "value": "500"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      }
    },     "levels": {
      "n": [        10,         25,         50,         100
      ]
    }
  },   "reasoning_gym\\algorithmic\\sentence_reordering.py": {
    "config": {
      "min_words_in_sentence": {
        "type": "int",         "value": "3"
      },       "max_words_in_sentence": {
        "type": "int",         "value": "20"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "words_in_sentence": [        5,         20,         50,         100
      ]
    }
  },   "reasoning_gym\\algorithmic\\spell_backward.py": {
    "config": {
      "min_word_len": {
        "type": "int",         "value": "3"
      },       "max_word_len": {
        "type": "int",         "value": "10"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "data_file": {
        "type": "str",         "value": "'words3to10.txt'"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "word_len": [        3,         4,         5,         6,         7,         8,         9,         10
      ]
    }
  },   "reasoning_gym\\algorithmic\\spiral_matrix.py": {
    "config": {
      "min_n": {
        "type": "int",         "value": "2"
      },       "max_n": {
        "type": "int",         "value": "10"
      },       "size": {
        "type": "int",         "value": "500"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      }
    },     "levels": {
      "n": [        10,         25,         50,         100
      ]
    }
  },   "reasoning_gym\\algorithmic\\string_insertion.py": {
    "config": {
      "min_string_length": {
        "type": "int",         "value": "5"
      },       "max_string_length": {
        "type": "int",         "value": "20"
      },       "size": {
        "type": "int",         "value": "500"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      }
    },     "levels": {
      "string_length": [        10,         50,         100,         500
      ]
    }
  },   "reasoning_gym\\algorithmic\\string_manipulation.py": {
    "config": {
      "min_string_length": {
        "type": "int",         "value": "5"
      },       "max_string_length": {
        "type": "int",         "value": "20"
      },       "min_num_rules": {
        "type": "int",         "value": "3"
      },       "max_num_rules": {
        "type": "int",         "value": "8"
      },       "size": {
        "type": "int",         "value": "500"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      }
    },     "levels": {
      "string_length": [        10,         50,         100,         500
      ],       "num_rules": [        3,         5,         10,         15,         20
      ]
    }
  },   "reasoning_gym\\algorithmic\\string_splitting.py": {
    "config": {
      "min_initial_machines": {
        "type": "int",         "value": "0"
      },       "max_initial_machines": {
        "type": "int",         "value": "5"
      },       "max_iterations": {
        "type": "int",         "value": "1000"
      },       "size": {
        "type": "int",         "value": "500"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      }
    },     "levels": {
      "initial_machines": [        10,         50,         100,         500
      ]
    }
  },   "reasoning_gym\\algorithmic\\string_synthesis.py": {
    "config": {
      "min_initial_blocks": {
        "type": "int",         "value": "0"
      },       "max_initial_blocks": {
        "type": "int",         "value": "5"
      },       "max_iterations": {
        "type": "int",         "value": "1000"
      },       "size": {
        "type": "int",         "value": "500"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      }
    },     "levels": {
      "initial_blocks": [        10,         50,         100,         500
      ]
    }
  },   "reasoning_gym\\algorithmic\\word_ladder.py": {
    "config": {
      "min_word_length": {
        "type": "int",         "value": "4"
      },       "max_word_length": {
        "type": "int",         "value": "4"
      },       "min_chain_length": {
        "type": "int",         "value": "-1"
      },       "max_chain_length": {
        "type": "int",         "value": "-1"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "word_length": [        3,         4,         5
      ]
    }
  },   "reasoning_gym\\algorithmic\\word_sequence_reversal.py": {
    "config": {
      "min_words": {
        "type": "int",         "value": "3"
      },       "max_words": {
        "type": "int",         "value": "8"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "words": [        10,         25,         50,         100
      ]
    }
  },   "reasoning_gym\\algorithmic\\word_sorting.py": {
    "config": {
      "min_words": {
        "type": "int",         "value": "3"
      },       "max_words": {
        "type": "int",         "value": "10"
      },       "min_word_length": {
        "type": "int",         "value": "3"
      },       "max_word_length": {
        "type": "int",         "value": "12"
      },       "transformation": {
        "type": "TextTransformation",         "value": "TextTransformation.ORIGINAL"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "num_words": [        5,         10,         25,         50,         100
      ],       "word_length": [        3,         5,         10,         15
      ]
    }
  },   "reasoning_gym\\arc\\arc_1d.py": {
    "config": {
      "min_size": {
        "type": "int",         "value": "10"
      },       "max_size": {
        "type": "int",         "value": "30"
      },       "num_train": {
        "type": "int",         "value": "3"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "size": [        10,         25,         50,         100
      ]
    }
  },   "reasoning_gym\\arc\\arc_agi.py": {
    "config": {
      "use_train": {
        "type": "bool",         "value": "True"
      },       "use_eval": {
        "type": "bool",         "value": "True"
      },       "board_format_opts": {
        "type": "BoardFormattingOptions",         "value": "field(default_factory=lambda: BoardFormattingOptions())"
      },       "rotations": {
        "type": "list[str]",         "value": "field(default_factory=lambda: ['90', '180', '270'])"
      },       "mirrors": {
        "type": "list[str]",         "value": "field(default_factory=lambda: ['horizontal', 'vertical', 'diagonal', 'counterdiagonal'])"
      },       "use_color_permutation": {
        "type": "bool",         "value": "True"
      },       "shuffle_example_order": {
        "type": "bool",         "value": "True"
      },       "rotations_weights": {
        "type": "list[float]",         "value": "field(default_factory=lambda: [0.25, 0.25, 0.25, 0.25])"
      },       "mirrors_weights": {
        "type": "list[float]",         "value": "field(default_factory=lambda: [0.2, 0.2, 0.2, 0.2, 0.2])"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "rotations_weights": [        [          0.3,           0.2,           0.3,           0.2
        ],         [          0.15,           0.3,           0.25,           0.3
        ],         [          0.1,           0.35,           0.2,           0.35
        ],         [          0.0,           0.4,           0.2,           0.4
        ]
      ],       "mirrors_weights": [        [          0.3,           0.3,           0.2,           0.1,           0.1
        ],         [          0.2,           0.2,           0.2,           0.2,           0.2
        ],         [          0.1,           0.1,           0.2,           0.3,           0.3
        ],         [          0.05,           0.05,           0.1,           0.4,           0.4
        ]
      ]
    }
  },   "reasoning_gym\\arc\\rearc.py": {
    "config": {
      "min_examples": {
        "type": "int",         "value": "3"
      },       "max_examples": {
        "type": "int",         "value": "5"
      },       "diff_lb": {
        "type": "int",         "value": "0"
      },       "diff_ub": {
        "type": "int",         "value": "0.2"
      },       "board_format_opts": {
        "type": "BoardFormattingOptions",         "value": "field(default_factory=lambda: BoardFormattingOptions())"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      },       "rng_difficulty_ranges": {
        "type": "list[tuple[float, float]]",         "value": "field(default_factory=lambda: RNG_DIFFICULTY_RANGES)"
      },       "rng_difficulty_weights": {
        "type": "list[float]",         "value": "field(default_factory=lambda: [1 / len(RNG_DIFFICULTY_RANGES)] * len(RNG_DIFFICULTY_RANGES))"
      },       "pso_difficulty_ranges": {
        "type": "list[tuple[float, float]]",         "value": "field(default_factory=lambda: PSO_DIFFICULTY_RANGES)"
      },       "pso_difficulty_weights": {
        "type": "list[float]",         "value": "field(default_factory=lambda: [1 / len(PSO_DIFFICULTY_RANGES)] * len(PSO_DIFFICULTY_RANGES))"
      }
    },     "levels": {
      "pso_difficulty_weights": [        [          1,           0,           0,           0,           0,           0,           0,           0
        ],         [          0,           1,           0,           0,           0,           0,           0,           0
        ],         [          0,           0,           1,           0,           0,           0,           0,           0
        ],         [          0,           0,           0,           1,           0,           0,           0,           0
        ],         [          0,           0,           0,           0,           1,           0,           0,           0
        ],         [          0,           0,           0,           0,           0,           1,           0,           0
        ],         [          0,           0,           0,           0,           0,           0,           1,           0
        ],         [          0,           0,           0,           0,           0,           0,           0,           1
        ]
      ],       "rng_difficulty_weights": [        [          1,           0,           0,           0,           0,           0,           0,           0
        ],         [          0,           1,           0,           0,           0,           0,           0,           0
        ],         [          0,           0,           1,           0,           0,           0,           0,           0
        ],         [          0,           0,           0,           1,           0,           0,           0,           0
        ],         [          0,           0,           0,           0,           1,           0,           0,           0
        ],         [          0,           0,           0,           0,           0,           1,           0,           0
        ],         [          0,           0,           0,           0,           0,           0,           1,           0
        ],         [          0,           0,           0,           0,           0,           0,           0,           1
        ]
      ]
    }
  },   "reasoning_gym\\arithmetic\\basic_arithmetic.py": {
    "config": {
      "min_terms": {
        "type": "int",         "value": "2"
      },       "max_terms": {
        "type": "int",         "value": "6"
      },       "min_digits": {
        "type": "int",         "value": "1"
      },       "max_digits": {
        "type": "int",         "value": "4"
      },       "operators": {
        "type": "list[str]",         "value": "('+', '-', '*', '/')"
      },       "allow_parentheses": {
        "type": "bool",         "value": "True"
      },       "allow_negation": {
        "type": "bool",         "value": "True"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      },       "format_style": {
        "type": "Literal['simple', 'natural']",         "value": "'simple'"
      },       "whitespace": {
        "type": "Literal['no_space', 'single', 'random']",         "value": "'single'"
      }
    },     "levels": {
      "num_terms": [        2,         5,         10,         15
      ],       "num_digits": [        1,         2,         5,         10
      ]
    }
  },   "reasoning_gym\\arithmetic\\bitwise_arithmetic.py": {
    "config": {
      "difficulty": {
        "type": "int",         "value": "2"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "difficulty": [        1,         2,         3,         4,         5,         6,         7,         8,         9,         10
      ]
    }
  },   "reasoning_gym\\arithmetic\\calendar_arithmetic.py": {
    "config": {
      "year": {
        "type": "int",         "value": "2022"
      },       "tasks": {
        "type": "Optional[list[str]]",         "value": "None"
      },       "offset_upper_bound": {
        "type": "int",         "value": "100"
      },       "leap_year_range": {
        "type": "int",         "value": "200"
      },       "seed": {
        "type": "Optional[int]",         "value": "42"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "tasks": [        [          "weekday_of_date"
        ],         [          "weekday_of_date",           "is_leap_year",           "weekday_offset"
        ],         [          "weekday_of_date",           "is_leap_year",           "weekday_offset",           "count_days",           "count_business_days"
        ],         [          "weekday_of_date",           "is_leap_year",           "weekday_offset",           "count_days",           "count_business_days",           "weekday_of_date_from_first_date",           "recurring_event_day"
        ]
      ],       "offset_upper_bound": [        30,         100,         250,         365
      ]
    }
  },   "reasoning_gym\\arithmetic\\chain_sum.py": {
    "config": {
      "min_terms": {
        "type": "int",         "value": "2"
      },       "max_terms": {
        "type": "int",         "value": "6"
      },       "min_digits": {
        "type": "int",         "value": "1"
      },       "max_digits": {
        "type": "int",         "value": "4"
      },       "allow_negation": {
        "type": "bool",         "value": "False"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "num_terms": [        2,         3,         4,         5,         6,         7,         8,         9,         10,         11,         12
      ],       "num_digits": [        1,         2,         3,         4,         5,         6,         7,         8,         9,         10
      ]
    }
  },   "reasoning_gym\\arithmetic\\count_bits.py": {
    "config": {
      "min_n": {
        "type": "int",         "value": "1"
      },       "max_n": {
        "type": "int",         "value": "2 ** 31 - 1"
      },       "size": {
        "type": "int",         "value": "500"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      }
    },     "levels": {
      "n": [        10,         1000,         1000000,         100000000,         2147483647
      ]
    }
  },   "reasoning_gym\\arithmetic\\decimal_arithmetic.py": {
    "config": {
      "min_num_decimal_places": {
        "type": "int",         "value": "3"
      },       "max_num_decimal_places": {
        "type": "int",         "value": "3"
      },       "min_terms": {
        "type": "int",         "value": "2"
      },       "max_terms": {
        "type": "int",         "value": "6"
      },       "precision": {
        "type": "int",         "value": "12"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "decimal_places": [        3,         5,         8,         10
      ],       "precision": [        5,         7,         10,         12
      ],       "num_terms": [        2,         5,         8,         10
      ]
    }
  },   "reasoning_gym\\arithmetic\\decimal_chain_sum.py": {
    "config": {
      "min_terms": {
        "type": "int",         "value": "2"
      },       "max_terms": {
        "type": "int",         "value": "6"
      },       "min_digits": {
        "type": "int",         "value": "1"
      },       "max_digits": {
        "type": "int",         "value": "4"
      },       "min_decimal_places": {
        "type": "int",         "value": "1"
      },       "max_decimal_places": {
        "type": "int",         "value": "4"
      },       "allow_negation": {
        "type": "bool",         "value": "False"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "num_terms": [        2,         5,         8,         10
      ],       "num_digits": [        1,         2,         4,         8,         10
      ],       "decimal_places": [        1,         2,         4,         6,         8
      ]
    }
  },   "reasoning_gym\\arithmetic\\dice.py": {
    "config": {
      "num_dice": {
        "type": "int",         "value": "4"
      },       "max_dice_size": {
        "type": "int",         "value": "20"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "num_dice": [        4,         6,         8,         10
      ],       "max_dice_size": [        20,         25,         30,         35
      ]
    }
  },   "reasoning_gym\\arithmetic\\fraction_simplification.py": {
    "config": {
      "min_value": {
        "type": "int",         "value": "1"
      },       "max_value": {
        "type": "int",         "value": "1000"
      },       "min_factor": {
        "type": "int",         "value": "1"
      },       "max_factor": {
        "type": "int",         "value": "100"
      },       "styles": {
        "type": "Sequence[str]",         "value": "('plain', 'latex_inline', 'latex_frac', 'latex_dfrac')"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "value": [        1,         100,         1000,         10000
      ],       "factor": [        1,         10,         100,         1000
      ]
    }
  },   "reasoning_gym\\arithmetic\\gcd.py": {
    "config": {
      "min_numbers": {
        "type": "int",         "value": "2"
      },       "max_numbers": {
        "type": "int",         "value": "2"
      },       "min_value": {
        "type": "int",         "value": "1"
      },       "max_value": {
        "type": "int",         "value": "1000"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "num_terms": [        2,         3,         4,         5
      ],       "value": [        100,         1000,         10000,         100000
      ]
    }
  },   "reasoning_gym\\arithmetic\\lcm.py": {
    "config": {
      "min_numbers": {
        "type": "int",         "value": "2"
      },       "max_numbers": {
        "type": "int",         "value": "2"
      },       "min_value": {
        "type": "int",         "value": "1"
      },       "max_value": {
        "type": "int",         "value": "100"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "numbers": [        2,         3,         4,         5
      ],       "value": [        100,         1000,         10000,         100000
      ]
    }
  },   "reasoning_gym\\arithmetic\\leg_counting.py": {
    "config": {
      "min_animals": {
        "type": "int",         "value": "3"
      },       "max_animals": {
        "type": "int",         "value": "10"
      },       "min_instances": {
        "type": "int",         "value": "1"
      },       "max_instances": {
        "type": "int",         "value": "15"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "num_animals": [        1,         2,         3,         4,         5,         6,         7,         8,         9,         10,         11,         12,         13,         14,         15,         16,         17,         18,         19,         20,         21,         22,         23,         24,         25,         26,         27,         28,         29,         30,         31,         32,         33,         34,         35,         36
      ],       "num_instances": [        2,         4,         8,         16,         32,         64,         128,         256,         512,         1024
      ]
    }
  },   "reasoning_gym\\arithmetic\\number_format.py": {
    "config": {
      "min_num_candidates": {
        "type": "int",         "value": "2"
      },       "max_num_candidates": {
        "type": "int",         "value": "5"
      },       "min_n": {
        "type": "float",         "value": "1000"
      },       "max_n": {
        "type": "float",         "value": "1000000000"
      },       "max_delta": {
        "type": "float",         "value": "10.0"
      },       "size": {
        "type": "int",         "value": "500"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      }
    },     "levels": {
      "num_candidates": [        5,         25,         100,         500
      ],       "n": [        1000,         100000,         1000000,         1000000000
      ],       "max_delta": [        10.0,         1.0,         0.001,         1e-06
      ]
    }
  },   "reasoning_gym\\arithmetic\\power_function.py": {
    "config": {
      "min_base": {
        "type": "float",         "value": "-1000.0"
      },       "max_base": {
        "type": "float",         "value": "1000.0"
      },       "min_exponent": {
        "type": "int",         "value": "0"
      },       "max_exponent": {
        "type": "int",         "value": "8"
      },       "size": {
        "type": "int",         "value": "500"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      }
    },     "levels": {
      "exponent": [        2,         4,         6,         8,         10
      ]
    }
  },   "reasoning_gym\\arithmetic\\prime_factorization.py": {
    "config": {
      "min_value": {
        "type": "int",         "value": "2"
      },       "max_value": {
        "type": "int",         "value": "1000"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "value": [        10,         1000,         5000,         10000
      ]
    }
  },   "reasoning_gym\\arithmetic\\products.py": {
    "config": {
      "min_terms": {
        "type": "int",         "value": "2"
      },       "max_terms": {
        "type": "int",         "value": "2"
      },       "min_digits": {
        "type": "int",         "value": "1"
      },       "max_digits": {
        "type": "int",         "value": "5"
      },       "allow_negation": {
        "type": "bool",         "value": "False"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "num_terms": [        2,         3,         4,         5,         6,         7,         8,         9,         10,         11,         12
      ],       "num_digits": [        1,         2,         3,         4,         5,         6,         7,         8,         9,         10
      ]
    }
  },   "reasoning_gym\\arithmetic\\time_intervals.py": {
    "config": {
      "min_time": {
        "type": "time",         "value": "time.min"
      },       "max_time": {
        "type": "time",         "value": "time.max"
      },       "max_time_difference_seconds": {
        "type": "int",         "value": "24 * 60 * 60"
      },       "min_date": {
        "type": "date",         "value": "date(1900, 1, 1)"
      },       "max_date": {
        "type": "date",         "value": "date(3000, 1, 1)"
      },       "max_date_difference_days": {
        "type": "int",         "value": "100"
      },       "task_types": {
        "type": "list[str]",         "value": "field(default_factory=lambda: ['time', 'time_seconds', 'time_ms', 'date', 'datetime', 'datetime_tz'])"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "max_time_difference_seconds": [        60,         3600,         10800,         21600,         32400,         43200,         86400
      ],       "max_date_difference_days": [        1,         7,         30,         365,         1825
      ]
    }
  },   "reasoning_gym\\arithmetic\\gsm_symbolic\\gsm_symbolic.py": {
    "config": {
      "difficulty": {
        "type": "float",         "value": "1.0"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": null
  },   "reasoning_gym\\coaching\\curriculum_config.py": {
    "config": {
      "attribute_levels": {
        "type": "Dict[str, int]",         "value": null
      },       "weight": {
        "type": "float",         "value": "1.0"
      }
    },     "levels": null
  },   "reasoning_gym\\code\\bf.py": {
    "config": {
      "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      },       "difficulty": {
        "type": "int",         "value": "1"
      }
    },     "levels": {
      "difficulty": [        1,         2,         3
      ]
    }
  },   "reasoning_gym\\code\\codeio.py": {
    "config": {
      "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      },       "input_prediction_probability": {
        "type": "float",         "value": "0.5"
      },       "difficulty": {
        "type": "Optional[int]",         "value": "None"
      }
    },     "levels": {
      "difficulty": [        6,         7,         8,         9
      ]
    }
  },   "reasoning_gym\\cognition\\color_cube_rotation.py": {
    "config": {
      "min_rotations": {
        "type": "int",         "value": "1"
      },       "max_rotations": {
        "type": "int",         "value": "3"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "rotations": [        1,         5,         10,         50,         100
      ]
    }
  },   "reasoning_gym\\cognition\\figlet_fonts.py": {
    "config": {
      "static_word": {
        "type": "Optional[str]",         "value": "None"
      },       "static_font": {
        "type": "Optional[str]",         "value": "None"
      },       "min_word_len": {
        "type": "int",         "value": "3"
      },       "max_word_len": {
        "type": "int",         "value": "7"
      },       "space_letters": {
        "type": "bool",         "value": "True"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "word_len": [        3,         5,         10,         15,         20,         30
      ]
    }
  },   "reasoning_gym\\cognition\\modulo_grid.py": {
    "config": {
      "size_x": {
        "type": "int",         "value": "20"
      },       "size_y": {
        "type": "int",         "value": "20"
      },       "max_divisor": {
        "type": "int",         "value": "20"
      },       "max_target": {
        "type": "int",         "value": "20"
      },       "max_holes": {
        "type": "int",         "value": "1"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "size_x": [        20,         40,         60,         80
      ],       "size_y": [        20,         40,         60,         80
      ],       "max_holes": [        1,         5,         10,         15
      ],       "max_divisor": [        3,         5,         7,         15,         17,         49
      ],       "max_target": [        1,         0,         3,         7,         9,         21
      ]
    }
  },   "reasoning_gym\\cognition\\needle_haystack.py": {
    "config": {
      "min_num_statements": {
        "type": "int",         "value": "10"
      },       "max_num_statements": {
        "type": "int",         "value": "100"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "num_statements": [        10,         100,         500,         1000
      ]
    }
  },   "reasoning_gym\\cognition\\number_sequences.py": {
    "config": {
      "min_terms": {
        "type": "int",         "value": "4"
      },       "max_terms": {
        "type": "int",         "value": "8"
      },       "min_value": {
        "type": "int",         "value": "-100"
      },       "max_value": {
        "type": "int",         "value": "100"
      },       "max_complexity": {
        "type": "int",         "value": "3"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "terms": [        4,         8,         12,         16
      ],       "min_value": [        -100,         -500,         -1000,         -10000
      ],       "max_value": [        100,         500,         1000,         10000
      ],       "max_complexity": [        2,         3,         4,         5
      ]
    }
  },   "reasoning_gym\\cognition\\rectangle_count.py": {
    "config": {
      "max_rectangles": {
        "type": "int",         "value": "10"
      },       "width": {
        "type": "int",         "value": "80"
      },       "height": {
        "type": "int",         "value": "80"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "max_rectangles": [        5,         10,         15,         20,         25
      ]
    }
  },   "reasoning_gym\\cognition\\rubiks_cube.py": {
    "config": {
      "min_scramble_steps": {
        "type": "int",         "value": "3"
      },       "max_scramble_steps": {
        "type": "int",         "value": "10"
      },       "cube_size": {
        "type": "int",         "value": "3"
      },       "remove_ansi": {
        "type": "bool",         "value": "True"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "cube_size": [        3,         4,         5,         6,         7
      ],       "scramble_steps": [        3,         10,         25,         50,         100
      ]
    }
  },   "reasoning_gym\\games\\boxnet.py": {
    "config": {
      "min_row_num": {
        "type": "int",         "value": "1"
      },       "max_row_num": {
        "type": "int",         "value": "4"
      },       "min_column_num": {
        "type": "int",         "value": "2"
      },       "max_column_num": {
        "type": "int",         "value": "4"
      },       "min_box_num": {
        "type": "int",         "value": "1"
      },       "max_box_num": {
        "type": "int",         "value": "1"
      },       "colour_list": {
        "type": "list[str]",         "value": "field(default_factory=lambda: ['red', 'blue', 'green'])"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "row_num": [        1,         2,         3,         4,         5,         6,         7,         8,         9
      ],       "column_num": [        1,         2,         3,         4,         5,         6,         7,         8,         9
      ],       "box_num": [        1,         2,         3,         4,         5,         6,         7,         8,         9
      ]
    }
  },   "reasoning_gym\\games\\countdown.py": {
    "config": {
      "min_numbers": {
        "type": "int",         "value": "4"
      },       "max_numbers": {
        "type": "int",         "value": "6"
      },       "min_value": {
        "type": "int",         "value": "1"
      },       "max_value": {
        "type": "int",         "value": "100"
      },       "min_target": {
        "type": "int",         "value": "100"
      },       "max_target": {
        "type": "int",         "value": "999"
      },       "operators": {
        "type": "tuple",         "value": "('+', '-', '*', '/')"
      },       "shuffle": {
        "type": "bool",         "value": "True"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "numbers": [        3,         6,         9,         12,         15
      ],       "target": [        100,         500,         1000,         5000,         10000
      ],       "value": [        1,         100,         250,         500,         1000
      ]
    }
  },   "reasoning_gym\\games\\emoji_mystery.py": {
    "config": {
      "size": {
        "type": "int",         "value": "1000"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "min_words_in_sentence": {
        "type": "int",         "value": "3"
      },       "max_words_in_sentence": {
        "type": "int",         "value": "35"
      }
    },     "levels": {
      "num_words_in_sentence": [        5,         10,         20,         30,         40,         50
      ]
    }
  },   "reasoning_gym\\games\\futoshiki.py": {
    "config": {
      "min_board_size": {
        "type": "int",         "value": "4"
      },       "max_board_size": {
        "type": "int",         "value": "9"
      },       "min_difficulty": {
        "type": "int",         "value": "0"
      },       "max_difficulty": {
        "type": "int",         "value": "3"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "board_size": [        4,         6,         7,         9
      ],       "difficulty": [        0,         1,         2,         3
      ]
    }
  },   "reasoning_gym\\games\\knight_swap.py": {
    "config": {
      "min_nodes": {
        "type": "int",         "value": "6"
      },       "max_nodes": {
        "type": "int",         "value": "9"
      },       "min_pieces": {
        "type": "int",         "value": "2"
      },       "max_pieces": {
        "type": "int",         "value": "2"
      },       "min_steps": {
        "type": "int",         "value": "4"
      },       "max_steps": {
        "type": "int",         "value": "20"
      },       "max_attempts": {
        "type": "int",         "value": "100"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "5"
      },       "impossible_ratio": {
        "type": "float",         "value": "0.2"
      }
    },     "levels": {
      "nodes": [        4,         6,         8,         10,         12
      ],       "pieces": [        2,         3,         4,         5,         6
      ],       "steps": [        1,         10,         20,         30
      ]
    }
  },   "reasoning_gym\\games\\mahjong.py": {
    "config": {
      "min_num_rounds": {
        "type": "int",         "value": "10"
      },       "max_num_rounds": {
        "type": "int",         "value": "50"
      },       "size": {
        "type": "int",         "value": "500"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      }
    },     "levels": {
      "num_rounds": [        10,         50,         100,         500
      ]
    }
  },   "reasoning_gym\\games\\maze.py": {
    "config": {
      "min_dist": {
        "type": "int",         "value": "5"
      },       "max_dist": {
        "type": "int",         "value": "10"
      },       "min_grid_size": {
        "type": "int",         "value": "5"
      },       "max_grid_size": {
        "type": "int",         "value": "10"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "50"
      }
    },     "levels": {
      "dist": [        10,         25,         50,         100
      ],       "grid_size": [        10,         25,         50,         100
      ]
    }
  },   "reasoning_gym\\games\\mini_sudoku.py": {
    "config": {
      "min_empty": {
        "type": "int",         "value": "8"
      },       "max_empty": {
        "type": "int",         "value": "12"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "empty": [        4,         6,         8,         10,         12
      ]
    }
  },   "reasoning_gym\\games\\n_queens.py": {
    "config": {
      "n": {
        "type": "int",         "value": "8"
      },       "min_remove": {
        "type": "int",         "value": "1"
      },       "max_remove": {
        "type": "int",         "value": "7"
      },       "size": {
        "type": "int",         "value": "500"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      }
    },     "levels": {
      "n": [        4,         6,         8,         10,         12
      ],       "num_removed": [        2,         4,         6,         8,         10
      ]
    }
  },   "reasoning_gym\\games\\puzzle24.py": {
    "config": {
      "operators": {
        "type": "tuple",         "value": "('+', '-', '*', '/')"
      },       "min_value": {
        "type": "int",         "value": "1"
      },       "max_value": {
        "type": "int",         "value": "10"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "value": [        1,         5,         6,         7,         8,         9,         10
      ]
    }
  },   "reasoning_gym\\games\\rush_hour.py": {
    "config": {
      "min_moves": {
        "type": "int",         "value": "1"
      },       "max_moves": {
        "type": "int",         "value": "50"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "moves": [        5,         25,         50,         100
      ]
    }
  },   "reasoning_gym\\games\\sokoban.py": {
    "config": {
      "min_w": {
        "type": "int",         "value": "6"
      },       "min_h": {
        "type": "int",         "value": "6"
      },       "max_w": {
        "type": "int",         "value": "10"
      },       "max_h": {
        "type": "int",         "value": "10"
      },       "min_boxes": {
        "type": "int",         "value": "4"
      },       "max_boxes": {
        "type": "int",         "value": "10"
      },       "max_depth": {
        "type": "int",         "value": "80"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "width": [        6,         7,         8,         9,         10,         11,         12,         13,         14,         15,         16,         17,         18,         19
      ],       "height": [        6,         7,         8,         9,         10,         11,         12,         13,         14,         15,         16,         17,         18,         19
      ]
    }
  },   "reasoning_gym\\games\\sudoku.py": {
    "config": {
      "min_empty": {
        "type": "int",         "value": "30"
      },       "max_empty": {
        "type": "int",         "value": "50"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "empty": [        20,         30,         40,         50,         60
      ]
    }
  },   "reasoning_gym\\games\\tower_of_hanoi.py": {
    "config": {
      "min_disks": {
        "type": "int",         "value": "3"
      },       "max_disks": {
        "type": "int",         "value": "7"
      },       "min_pegs": {
        "type": "int",         "value": "3"
      },       "max_pegs": {
        "type": "int",         "value": "4"
      },       "size": {
        "type": "int",         "value": "500"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "visualize": {
        "type": "bool",         "value": "False"
      }
    },     "levels": {
      "num_disks": [        3,         5,         10,         15
      ],       "num_pegs": [        3,         4,         5
      ]
    }
  },   "reasoning_gym\\games\\tsumego.py": {
    "config": {
      "min_board_size": {
        "type": "int",         "value": "9"
      },       "max_board_size": {
        "type": "int",         "value": "13"
      },       "max_stones": {
        "type": "int",         "value": "15"
      },       "size": {
        "type": "int",         "value": "500"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      }
    },     "levels": {
      "board_size": [        5,         10,         15,         19
      ],       "max_stones": [        5,         10,         13,         15
      ]
    }
  },   "reasoning_gym\\geometry\\advanced_geometry.py": {
    "config": {
      "min_coord": {
        "type": "int",         "value": "-10"
      },       "max_coord": {
        "type": "int",         "value": "10"
      },       "size": {
        "type": "int",         "value": "50"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "task_types": {
        "type": "list[str]",         "value": "field(default_factory=lambda: ['orthocenter', 'incircle_radius', 'angle_measure'])"
      }
    },     "levels": {
      "min_coord": [        -10,         -100,         -1000,         -10000
      ],       "max_coord": [        10,         100,         1000,         10000
      ]
    }
  },   "reasoning_gym\\geometry\\simple_geometry.py": {
    "config": {
      "min_sides": {
        "type": "int",         "value": "3"
      },       "max_sides": {
        "type": "int",         "value": "6"
      },       "min_angle": {
        "type": "int",         "value": "10"
      },       "max_angle": {
        "type": "int",         "value": "170"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "100"
      }
    },     "levels": {
      "sides": [        5,         10,         15,         30
      ]
    }
  },   "reasoning_gym\\graphs\\course_schedule.py": {
    "config": {
      "min_num_courses": {
        "type": "int",         "value": "5"
      },       "max_num_courses": {
        "type": "int",         "value": "10"
      },       "min_num_prerequisites": {
        "type": "int",         "value": "1"
      },       "max_num_prerequisites": {
        "type": "int",         "value": "2"
      },       "min_cycle_length": {
        "type": "int",         "value": "3"
      },       "max_cycle_length": {
        "type": "int",         "value": "5"
      },       "p_solvable": {
        "type": "float",         "value": "0.5"
      },       "size": {
        "type": "int",         "value": "500"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      }
    },     "levels": {
      "num_courses": [        5,         10,         25,         50,         100
      ],       "num_prerequisites": [        2,         3,         4,         5
      ],       "cycle_length": [        3,         4,         5,         6
      ]
    }
  },   "reasoning_gym\\graphs\\family_relationships.py": {
    "config": {
      "min_family_size": {
        "type": "int",         "value": "4"
      },       "max_family_size": {
        "type": "int",         "value": "8"
      },       "male_names": {
        "type": "list[str]",         "value": "field(default_factory=lambda: ['James', 'John', 'Robert', 'Michael', 'William', 'David', 'Richard', 'Joseph', 'Thomas', 'Charles', 'Peter', 'Daniel', 'Matthew', 'Christopher', 'Andrew', 'George', 'Edward', 'Benjamin', 'Henry', 'Samuel', 'Alexander', 'Oliver', 'Jack', 'Harry', 'Jacob', 'Noah', 'Ethan', 'Lucas', 'Mason', 'Logan', 'Sebastian', 'Theodore', 'Owen', 'Liam', 'Aiden', 'Kai', 'Jayden', 'Zion', 'Phoenix', 'Atlas', 'Axel', 'Ryder', 'Finn'])"
      },       "female_names": {
        "type": "list[str]",         "value": "field(default_factory=lambda: ['Mary', 'Patricia', 'Jennifer', 'Linda', 'Elizabeth', 'Barbara', 'Susan', 'Jessica', 'Sarah', 'Karen', 'Emma', 'Lisa', 'Anna', 'Margaret', 'Victoria', 'Charlotte', 'Sophia', 'Isabella', 'Olivia', 'Ava', 'Mia', 'Emily', 'Abigail', 'Amelia', 'Eleanor', 'Grace', 'Alice', 'Lucy', 'Chloe', 'Sophie', 'Lily', 'Hannah', 'Zoe', 'Luna', 'Nova', 'Aria', 'Willow', 'Aurora', 'Sage', 'River', 'Winter', 'Sky', 'Rain'])"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "family_size": [        3,         4,         5,         6,         7,         8,         9,         10,         11
      ]
    }
  },   "reasoning_gym\\graphs\\largest_island.py": {
    "config": {
      "min_rows": {
        "type": "int",         "value": "5"
      },       "max_rows": {
        "type": "int",         "value": "10"
      },       "min_cols": {
        "type": "int",         "value": "5"
      },       "max_cols": {
        "type": "int",         "value": "10"
      },       "min_num_islands": {
        "type": "int",         "value": "0"
      },       "max_num_islands": {
        "type": "int",         "value": "5"
      },       "min_island_size": {
        "type": "int",         "value": "0"
      },       "max_island_size": {
        "type": "int",         "value": "10"
      },       "size": {
        "type": "int",         "value": "500"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      }
    },     "levels": {
      "rows": [        5,         25,         50,         100
      ],       "cols": [        5,         25,         50,         100
      ],       "num_islands": [        2,         5,         10,         20
      ],       "island_size": [        5,         10,         20,         30
      ]
    }
  },   "reasoning_gym\\graphs\\quantum_lock.py": {
    "config": {
      "difficulty": {
        "type": "int",         "value": "10"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "difficulty": [        1,         2,         3,         4,         5,         6,         7,         8,         9,         10
      ]
    }
  },   "reasoning_gym\\graphs\\shortest_path.py": {
    "config": {
      "min_rows": {
        "type": "int",         "value": "5"
      },       "max_rows": {
        "type": "int",         "value": "8"
      },       "min_cols": {
        "type": "int",         "value": "5"
      },       "max_cols": {
        "type": "int",         "value": "8"
      },       "p_blocked": {
        "type": "float",         "value": "0.4"
      },       "size": {
        "type": "int",         "value": "500"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      }
    },     "levels": {
      "rows": [        10,         25,         50,         100
      ],       "cols": [        10,         25,         50,         100
      ]
    }
  },   "reasoning_gym\\induction\\acre\\acre.py": {
    "config": {
      "train": {
        "type": "int",         "value": "1"
      },       "size": {
        "type": "int",         "value": "500"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      }
    },     "levels": null
  },   "reasoning_gym\\induction\\list_functions\\list_functions.py": {
    "config": {
      "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": null
  },   "reasoning_gym\\logic\\aiw.py": {
    "config": {
      "male_names": {
        "type": "list[str]",         "value": "field(default_factory=lambda: ['James', 'John', 'Robert', 'Michael', 'William', 'David', 'Richard', 'Joseph', 'Thomas', 'Charles', 'Bob'])"
      },       "female_names": {
        "type": "list[str]",         "value": "field(default_factory=lambda: ['Mary', 'Patricia', 'Jennifer', 'Linda', 'Elizabeth', 'Barbara', 'Susan', 'Jessica', 'Sarah', 'Margaret', 'Alice'])"
      },       "task_types": {
        "type": "list[TaskType]",         "value": "field(default_factory=lambda: [TaskType.SIBLINGS, TaskType.FRIENDS, TaskType.COLLEAGUES])"
      },       "task_type_weights": {
        "type": "list[float]",         "value": "field(default_factory=lambda: [1 / 3, 1 / 3, 1 / 3])"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "10"
      },       "max_entities": {
        "type": "int",         "value": "6"
      }
    },     "levels": {
      "task_type_weights": [        [          1.0,           0.0,           0.0
        ],         [          0.9,           0.05,           0.05
        ],         [          0.7,           0.15,           0.15
        ],         [          0.6,           0.2,           0.2
        ],         [          0.5,           0.25,           0.25
        ],         [          0.4,           0.3,           0.3
        ],         [          0.3,           0.35,           0.35
        ],         [          0.2,           0.4,           0.4
        ],         [          0.1,           0.45,           0.45
        ]
      ],       "num_entities": [        4,         6,         8,         10,         12,         14,         16
      ]
    }
  },   "reasoning_gym\\logic\\circuit_logic.py": {
    "config": {
      "min_terms": {
        "type": "int",         "value": "3"
      },       "max_terms": {
        "type": "int",         "value": "5"
      },       "min_inputs": {
        "type": "int",         "value": "2"
      },       "max_inputs": {
        "type": "int",         "value": "4"
      },       "neg_prob": {
        "type": "float",         "value": "0.3"
      },       "allow_reuse": {
        "type": "bool",         "value": "True"
      },       "size": {
        "type": "int",         "value": "100"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      }
    },     "levels": {
      "terms": [        3,         5,         10,         20,         30
      ],       "inputs": [        2,         4,         6,         8,         10
      ]
    }
  },   "reasoning_gym\\logic\\knights_knaves.py": {
    "config": {
      "n_people": {
        "type": "int",         "value": "2"
      },       "depth_constraint": {
        "type": "int",         "value": "2"
      },       "width_constraint": {
        "type": "int",         "value": "2"
      },       "size": {
        "type": "int",         "value": "500"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      }
    },     "levels": {
      "n_people": [        2,         3,         4,         5
      ],       "depth_constraint": [        2,         3,         4,         5
      ],       "width_constraint": [        2,         3,         4,         5
      ]
    }
  },   "reasoning_gym\\logic\\propositional_logic.py": {
    "config": {
      "min_vars": {
        "type": "int",         "value": "2"
      },       "max_vars": {
        "type": "int",         "value": "4"
      },       "min_statements": {
        "type": "int",         "value": "2"
      },       "max_statements": {
        "type": "int",         "value": "4"
      },       "min_complexity": {
        "type": "int",         "value": "1"
      },       "max_complexity": {
        "type": "int",         "value": "3"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "vars": [        2,         4,         6,         8,         10
      ],       "statements": [        2,         4,         6,         8,         10
      ],       "complexity": [        1,         2,         3,         4,         5
      ]
    }
  },   "reasoning_gym\\logic\\self_reference.py": {
    "config": {
      "difficulty": {
        "type": "int",         "value": "5"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "difficulty": [        1,         2,         3,         4,         5,         6,         7,         8,         9,         10
      ]
    }
  },   "reasoning_gym\\logic\\syllogisms.py": {
    "config": {
      "allow_all": {
        "type": "bool",         "value": "True"
      },       "allow_no": {
        "type": "bool",         "value": "True"
      },       "allow_some": {
        "type": "bool",         "value": "True"
      },       "allow_some_not": {
        "type": "bool",         "value": "True"
      },       "invalid_ratio": {
        "type": "float",         "value": "0.3"
      },       "inversion_probability": {
        "type": "float",         "value": "0.3"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "allow_all": [        true,         true,         true,         true
      ],       "allow_no": [        false,         true,         true,         true
      ],       "allow_some": [        false,         false,         true,         true
      ],       "allow_some_not": [        false,         false,         false,         true
      ]
    }
  },   "reasoning_gym\\logic\\zebra_puzzles.py": {
    "config": {
      "num_people": {
        "type": "int",         "value": "4"
      },       "num_characteristics": {
        "type": "int",         "value": "4"
      },       "seed": {
        "type": "Optional[int]",         "value": "None"
      },       "size": {
        "type": "int",         "value": "500"
      }
    },     "levels": {
      "num_people": [        2,         3,         4,         5,         6,         7
      ],       "num_characteristics": [        2,         3,         4,         5,         6,         7
      ]
    }
  }
}